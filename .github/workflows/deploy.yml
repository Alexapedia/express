on:
  push:
    branches:
      - main  

env:
  DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}  # GitHub Actions variable for the domain name

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Install SSH Client & rsync
        run: sudo apt-get update && sudo apt-get install -y sshpass rsync
      
      - name: Ensure SSH Config Directory Exists
        run: mkdir -p ~/.ssh && chmod 700 ~/.ssh

      - name: Add SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      
      - name: Disable SSH Host Key Checking
        run: echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Transfer Built Files to AWS Lightsail
        run: |
          REPO_NAME=$(basename -s .git <<< "https://github.com/${{ github.repository }}")
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_IP }} "sudo apt-get update && sudo apt-get install -y rsync"
          rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" . ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_IP }}:/root/$REPO_NAME
          
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: SSH Generate .env from GitHub Secrets
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo apt-get update && sudo apt-get install -y jq
            echo '${{ toJSON(secrets) }}' | jq -r 'keys[] as $k | "\($k)=\(.[$k])"' > /root/.env
            echo '${{ toJSON(vars) }}' | jq -r 'keys[] as $k | "\($k)=\(.[$k])"' >> /root/.env

      - name: SSH Install Docker and Docker Compose
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo apt-get update
            if ! [ -x "$(command -v docker)" ]; then
              echo "Installing Docker..."
              sudo apt-get install -y docker.io
            else
              echo "Docker already installed."
            fi

      - name: Deploy via SSH and Run Docker Compose
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export $(grep -v '^#' /root/.env | xargs)
            REPO_NAME=$(basename -s .git <<< "https://github.com/${{ github.repository }}")
            cd /root/$REPO_NAME || { echo "Directory not found"; exit 1; }
            
            sed -i "s/{{DOMAIN_NAME}}/${{ vars.DOMAIN_NAME }}/g" nginx/conf/default.conf
            sed -i "s/{{DOMAIN_NAME}}/${{ vars.DOMAIN_NAME }}/g" nginx/conf/ssl.conf.template
            
            DOMAIN_NAME=${{ vars.DOMAIN_NAME }} docker compose down --rmi all || true
            DOMAIN_NAME=${{ vars.DOMAIN_NAME }} docker compose up -d --build
            
            echo "Reloading NGINX..."
            docker restart nginx
            
            cp nginx/conf/ssl.conf.template nginx/conf/ssl.conf
            echo "Cleaning up unused Docker images"
            docker image prune -a -f
            exit 0
